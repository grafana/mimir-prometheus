name: Cherry-pick prometheus/prometheus commit

on:
  workflow_dispatch:
    inputs:
      commit_hash:
        description: "prometheus/prometheus commit hash to cherry-pick"
        required: true
        type: string
      target_branch:
        description: "Target branch to cherry-pick into"
        required: true
        default: "main"
        type: string

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  cherry-pick:
    runs-on: ubuntu-latest
    steps:
      - name: Validate commit hash
        id: validate-commit
        env:
          COMMIT_HASH: ${{ inputs.commit_hash }}
        run: |
          # Validate that commit hash is a valid format (at least 7 chars, hex)
          if [[ ! "$COMMIT_HASH" =~ ^[a-f0-9]{7,40}$ ]]; then
            echo "Error: Invalid commit hash format: $COMMIT_HASH"
            echo "Commit hash must be 7-40 hexadecimal characters"
            exit 1
          fi

          # Get short commit hash for display
          SHORT_HASH=${COMMIT_HASH:0:12}

          # Create timestamp for branch naming so that multiple runs don't clobber each other
          TIMESTAMP=$(date +%Y%m%d%H%M)

          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "short_hash=$SHORT_HASH" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

          echo "Validated commit: $COMMIT_HASH"

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          set-safe-directory: "*"

      - name: Add prometheus/prometheus remote and fetch commit
        env:
          COMMIT_HASH: ${{ steps.validate-commit.outputs.commit_hash }}
        run: |
          # Add prometheus/prometheus as a remote
          git remote add prometheus https://github.com/prometheus/prometheus.git

          # Fetch the specific commit (and some context around it)
          echo "Fetching commit $COMMIT_HASH from prometheus/prometheus..."
          git fetch prometheus $COMMIT_HASH

          # Verify the commit exists
          if ! git cat-file -e $COMMIT_HASH^{commit}; then
            echo "Error: Commit $COMMIT_HASH not found in prometheus/prometheus"
            exit 1
          fi

          echo "Successfully fetched commit $COMMIT_HASH"

      - name: Get commit info
        id: get-commit-info
        env:
          COMMIT_HASH: ${{ steps.validate-commit.outputs.commit_hash }}
        run: |
          # Get commit message and author info
          COMMIT_SUBJECT=$(git log --format="%s" -n 1 $COMMIT_HASH)
          COMMIT_AUTHOR=$(git log --format="%an" -n 1 $COMMIT_HASH)
          COMMIT_DATE=$(git log --format="%ad" --date=short -n 1 $COMMIT_HASH)

          # Escape for GitHub Actions
          COMMIT_SUBJECT_ESCAPED=$(echo "$COMMIT_SUBJECT" | sed 's/"/\\"/g')

          echo "commit_subject=$COMMIT_SUBJECT_ESCAPED" >> $GITHUB_OUTPUT
          echo "commit_author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
          echo "commit_date=$COMMIT_DATE" >> $GITHUB_OUTPUT

          echo "Commit subject: $COMMIT_SUBJECT"
          echo "Commit author: $COMMIT_AUTHOR"
          echo "Commit date: $COMMIT_DATE"

      # This job uses "mimir-github-bot" instead of "github-actions bot" (secrets.GITHUB_TOKEN)
      # because any events triggered by the later don't spawn GitHub actions.
      # Refer to https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#using-the-github_token-in-a-workflow
      - name: Retrieve GitHub App Credentials from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@28361cdb22223e5f1e34358c86c20908e7248760 # v1.1.0
        with:
          repo_secrets: |
            APP_ID=mimir-github-bot:app_id
            PRIVATE_KEY=mimir-github-bot:private_key

      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@d72941d797fd3113feb6b93fd0dec494b13a2547 # v1.12.0
        with:
          # Variables generated by the previous step get-secrets
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Cherry-pick commit
        env:
          COMMIT_HASH: ${{ steps.validate-commit.outputs.commit_hash }}
        run: |
          # Configure git for the cherry-pick
          git config user.name "mimir-github-bot[bot]"
          git config user.email "mimir-github-bot[bot]@users.noreply.github.com"

          echo "Cherry-picking commit $COMMIT_HASH..."

          # Attempt the cherry-pick
          if git cherry-pick $COMMIT_HASH; then
            echo "Cherry-pick successful!"
          else
            echo "Cherry-pick failed with conflicts. Checking status..."
            git status

            # Check if there are conflicts
            if git diff --name-only --diff-filter=U | grep -q .; then
              echo "Error: Cherry-pick resulted in merge conflicts."
              echo "Conflicted files:"
              git diff --name-only --diff-filter=U
              echo ""
              echo "Please resolve conflicts manually and create the PR yourself."
              exit 1
            else
              echo "Error: Cherry-pick failed for unknown reasons."
              exit 1
            fi
          fi

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@4e1beaa7521e8b457b572c090b25bd3db56bf1c5 # v5.0.3
        with:
          token: ${{ steps.app-token.outputs.token }}
          title: "Cherry-pick ${{ steps.validate-commit.outputs.short_hash }}: ${{ steps.get-commit-info.outputs.commit_subject }}"
          body: |
            ## Cherry-pick from prometheus/prometheus

            *This PR was automatically created by the [cherry-pick-prometheus workflow](https://github.com/grafana/mimir-prometheus/blob/main/.github/workflows/cherry-pick-prometheus.yml)*

            ### Details:
            - **Original commit**: ${{ format('[`{0}`](https://github.com/prometheus/prometheus/commit/{0})', steps.validate-commit.outputs.commit_hash) }}
            - **Commit subject**: ${{ steps.get-commit-info.outputs.commit_subject }}
            - **Original author**: ${{ steps.get-commit-info.outputs.commit_author }}
            - **Original date**: ${{ steps.get-commit-info.outputs.commit_date }}
            - **Target branch**: ${{ inputs.target_branch }}

            ### Changes:
            This PR cherry-picks the above commit from the upstream prometheus/prometheus repository.
          commit-message: "Cherry-pick ${{ steps.validate-commit.outputs.short_hash }}: ${{ steps.get-commit-info.outputs.commit_subject }}"
          branch: bot/${{ inputs.target_branch }}/cherry-pick-${{ steps.validate-commit.outputs.short_hash }}-${{ steps.validate-commit.outputs.timestamp }}
          base: ${{ inputs.target_branch }}
          delete-branch: true
