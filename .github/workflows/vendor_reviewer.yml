name: Auto-review upstream merge PRs

on:
  pull_request:
    types: [opened]
  workflow_run:
    workflows: ["ci", "golangci-lint"]
    types: [completed]

permissions: {}

jobs:
  upstream-merge-reviewer:
    runs-on: ubuntu-latest
    permissions:
      # The approval is not done by the workflow's GITHUB_TOKEN itself, but rather a separate GitHub app.
      contents: read
      id-token: write
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.user.login == 'mimir-github-bot[bot]' && startsWith(github.event.pull_request.head.ref, 'bot/main/merge-upstream-') }}

    steps:
      # Retrieve GitHub App Credentials from Vault for mimir-github-bot (generic app that should be able to approve the PR)
      - name: Retrieve GitHub App Credentials from Vault
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@28361cdb22223e5f1e34358c86c20908e7248760 # v1.1.0
        with:
          repo_secrets: |
            APP_ID=mimir-github-bot:app_id
            PRIVATE_KEY=mimir-github-bot:private_key

      # Generate GitHub App Token for approving PRs
      - name: Generate GitHub App Token
        id: approve-app-token
        uses: actions/create-github-app-token@d72941d797fd3113feb6b93fd0dec494b13a2547 # v1.12.0
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      # Approve the PR using the GitHub App Token
      - name: Approve
        run: |
          gh pr review "$PR_URL" \
            --approve -b "**I'm approving** this upstream merge PR.
            
            This PR merges changes from prometheus/prometheus upstream repository.
            
            Related GitHub action is defined [here](https://github.com/grafana/mimir-prometheus/tree/main/.github/workflows/vendor_reviewer.yml)."
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ steps.approve-app-token.outputs.token }}

      - name: Enable auto-merge
        run: |
          gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ steps.approve-app-token.outputs.token }}

  ci-failure-notifier:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - name: Get PR details and check if upstream merge
        id: check-pr
        run: |
          # Get PR details from the workflow run
          PR_NUMBER=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }} --jq '.pull_requests[0].number')
          
          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
            echo "No PR found for this workflow run"
            exit 0
          fi
          
          # Get PR details
          PR_INFO=$(gh pr view "$PR_NUMBER" --json author,headRefName,url)
          PR_AUTHOR=$(echo "$PR_INFO" | jq -r '.author.login')
          PR_BRANCH=$(echo "$PR_INFO" | jq -r '.headRefName')
          PR_URL=$(echo "$PR_INFO" | jq -r '.url')
          
          # Check if this is an upstream merge PR and determine job failure
          if [[ "$PR_AUTHOR" == "mimir-github-bot[bot]" && "$PR_BRANCH" == bot/main/merge-upstream-* ]]; then
            echo "is_upstream_merge=true" >> $GITHUB_OUTPUT
            echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            
            # Check if the failed workflow contains required jobs
            WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
            if [[ "$WORKFLOW_NAME" == "ci" ]]; then
              # Check if stringlabels job failed
              JOBS_JSON=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/jobs)
              STRINGLABELS_FAILED=$(echo "$JOBS_JSON" | jq -r '.jobs[] | select(.name == "test (stringlabels)") | .conclusion')
              
              if [[ "$STRINGLABELS_FAILED" == "failure" ]]; then
                echo "should_notify=true" >> $GITHUB_OUTPUT
                echo "failed_job=test (stringlabels)" >> $GITHUB_OUTPUT
              fi
            elif [[ "$WORKFLOW_NAME" == "golangci-lint" ]]; then
              echo "should_notify=true" >> $GITHUB_OUTPUT
              echo "failed_job=golangci-lint" >> $GITHUB_OUTPUT
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Slack notification for CI failure
        if: steps.check-pr.outputs.should_notify == 'true'
        uses: grafana/shared-workflows/actions/send-slack-message@7b628e7352c2dea057c565cc4fcd5564d5f396c0 #v1.0.0
        with:
          channel-id: C04AF91LPFX #mimir-ci-notifications
          payload: |
            {
              "text": ":warning: *Required CI job failed for upstream merge PR*\n\n**${{ steps.check-pr.outputs.failed_job }}** failed for upstream merge PR: <${{ steps.check-pr.outputs.pr_url }}|PR #${{ steps.check-pr.outputs.pr_number }}>\n\nWorkflow run: <${{ github.event.workflow_run.html_url }}|View failure details>"
            }