// Code generated by goyacc -l -o promql/parser/generated_parser.y.go promql/parser/generated_parser.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import (
	"math"
	"strconv"
	"time"

	"github.com/prometheus/prometheus/model/histogram"
	"github.com/prometheus/prometheus/model/labels"
	"github.com/prometheus/prometheus/model/value"
	"github.com/prometheus/prometheus/promql/parser/posrange"
)

type yySymType struct {
	yys         int
	node        Node
	item        Item
	matchers    []*labels.Matcher
	matcher     *labels.Matcher
	label       labels.Label
	labels      labels.Labels
	lblList     []labels.Label
	strings     []string
	series      []SequenceValue
	histogram   *histogram.FloatHistogram
	descriptors map[string]interface{}
	bucket_set  []float64
	int         int64
	uint        uint64
	float       float64
	duration    time.Duration
}

const EQL = 57346
const BLANK = 57347
const COLON = 57348
const COMMA = 57349
const COMMENT = 57350
const DURATION = 57351
const EOF = 57352
const ERROR = 57353
const IDENTIFIER = 57354
const LEFT_BRACE = 57355
const LEFT_BRACKET = 57356
const LEFT_PAREN = 57357
const OPEN_HIST = 57358
const CLOSE_HIST = 57359
const METRIC_IDENTIFIER = 57360
const NUMBER = 57361
const RIGHT_BRACE = 57362
const RIGHT_BRACKET = 57363
const RIGHT_PAREN = 57364
const SEMICOLON = 57365
const SPACE = 57366
const STRING = 57367
const TIMES = 57368
const histogramDescStart = 57369
const SUM_DESC = 57370
const COUNT_DESC = 57371
const SCHEMA_DESC = 57372
const OFFSET_DESC = 57373
const NEGATIVE_OFFSET_DESC = 57374
const BUCKETS_DESC = 57375
const NEGATIVE_BUCKETS_DESC = 57376
const ZERO_BUCKET_DESC = 57377
const ZERO_BUCKET_WIDTH_DESC = 57378
const histogramDescEnd = 57379
const operatorsStart = 57380
const ADD = 57381
const DIV = 57382
const EQLC = 57383
const EQL_REGEX = 57384
const GTE = 57385
const GTR = 57386
const LAND = 57387
const LOR = 57388
const LSS = 57389
const LTE = 57390
const LUNLESS = 57391
const MOD = 57392
const MUL = 57393
const NEQ = 57394
const NEQ_REGEX = 57395
const POW = 57396
const SUB = 57397
const AT = 57398
const ATAN2 = 57399
const operatorsEnd = 57400
const aggregatorsStart = 57401
const AVG = 57402
const BOTTOMK = 57403
const COUNT = 57404
const COUNT_VALUES = 57405
const GROUP = 57406
const MAX = 57407
const MIN = 57408
const QUANTILE = 57409
const STDDEV = 57410
const STDVAR = 57411
const SUM = 57412
const TOPK = 57413
const aggregatorsEnd = 57414
const keywordsStart = 57415
const BOOL = 57416
const BY = 57417
const GROUP_LEFT = 57418
const GROUP_RIGHT = 57419
const IGNORING = 57420
const OFFSET = 57421
const ON = 57422
const WITHOUT = 57423
const KEEPING_NAME = 57424
const keywordsEnd = 57425
const preprocessorStart = 57426
const START = 57427
const END = 57428
const preprocessorEnd = 57429
const startSymbolsStart = 57430
const START_METRIC = 57431
const START_SERIES_DESCRIPTION = 57432
const START_EXPRESSION = 57433
const START_METRIC_SELECTOR = 57434
const startSymbolsEnd = 57435

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"EQL",
	"BLANK",
	"COLON",
	"COMMA",
	"COMMENT",
	"DURATION",
	"EOF",
	"ERROR",
	"IDENTIFIER",
	"LEFT_BRACE",
	"LEFT_BRACKET",
	"LEFT_PAREN",
	"OPEN_HIST",
	"CLOSE_HIST",
	"METRIC_IDENTIFIER",
	"NUMBER",
	"RIGHT_BRACE",
	"RIGHT_BRACKET",
	"RIGHT_PAREN",
	"SEMICOLON",
	"SPACE",
	"STRING",
	"TIMES",
	"histogramDescStart",
	"SUM_DESC",
	"COUNT_DESC",
	"SCHEMA_DESC",
	"OFFSET_DESC",
	"NEGATIVE_OFFSET_DESC",
	"BUCKETS_DESC",
	"NEGATIVE_BUCKETS_DESC",
	"ZERO_BUCKET_DESC",
	"ZERO_BUCKET_WIDTH_DESC",
	"histogramDescEnd",
	"operatorsStart",
	"ADD",
	"DIV",
	"EQLC",
	"EQL_REGEX",
	"GTE",
	"GTR",
	"LAND",
	"LOR",
	"LSS",
	"LTE",
	"LUNLESS",
	"MOD",
	"MUL",
	"NEQ",
	"NEQ_REGEX",
	"POW",
	"SUB",
	"AT",
	"ATAN2",
	"operatorsEnd",
	"aggregatorsStart",
	"AVG",
	"BOTTOMK",
	"COUNT",
	"COUNT_VALUES",
	"GROUP",
	"MAX",
	"MIN",
	"QUANTILE",
	"STDDEV",
	"STDVAR",
	"SUM",
	"TOPK",
	"aggregatorsEnd",
	"keywordsStart",
	"BOOL",
	"BY",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"IGNORING",
	"OFFSET",
	"ON",
	"WITHOUT",
	"KEEPING_NAME",
	"keywordsEnd",
	"preprocessorStart",
	"START",
	"END",
	"preprocessorEnd",
	"startSymbolsStart",
	"START_METRIC",
	"START_SERIES_DESCRIPTION",
	"START_EXPRESSION",
	"START_METRIC_SELECTOR",
	"startSymbolsEnd",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 35,
	1, 136,
	10, 136,
	24, 136,
	-2, 0,
	-1, 58,
	2, 173,
	15, 173,
	75, 173,
	81, 173,
	-2, 102,
	-1, 59,
	2, 174,
	15, 174,
	75, 174,
	81, 174,
	-2, 103,
	-1, 60,
	2, 175,
	15, 175,
	75, 175,
	81, 175,
	-2, 105,
	-1, 61,
	2, 176,
	15, 176,
	75, 176,
	81, 176,
	-2, 106,
	-1, 62,
	2, 177,
	15, 177,
	75, 177,
	81, 177,
	-2, 107,
	-1, 63,
	2, 178,
	15, 178,
	75, 178,
	81, 178,
	-2, 112,
	-1, 64,
	2, 179,
	15, 179,
	75, 179,
	81, 179,
	-2, 114,
	-1, 65,
	2, 180,
	15, 180,
	75, 180,
	81, 180,
	-2, 116,
	-1, 66,
	2, 181,
	15, 181,
	75, 181,
	81, 181,
	-2, 117,
	-1, 67,
	2, 182,
	15, 182,
	75, 182,
	81, 182,
	-2, 118,
	-1, 68,
	2, 183,
	15, 183,
	75, 183,
	81, 183,
	-2, 119,
	-1, 69,
	2, 184,
	15, 184,
	75, 184,
	81, 184,
	-2, 120,
	-1, 197,
	12, 232,
	13, 232,
	18, 232,
	19, 232,
	25, 232,
	39, 232,
	45, 232,
	46, 232,
	49, 232,
	55, 232,
	60, 232,
	61, 232,
	62, 232,
	63, 232,
	64, 232,
	65, 232,
	66, 232,
	67, 232,
	68, 232,
	69, 232,
	70, 232,
	71, 232,
	75, 232,
	79, 232,
	81, 232,
	82, 232,
	85, 232,
	86, 232,
	-2, 0,
	-1, 198,
	12, 232,
	13, 232,
	18, 232,
	19, 232,
	25, 232,
	39, 232,
	45, 232,
	46, 232,
	49, 232,
	55, 232,
	60, 232,
	61, 232,
	62, 232,
	63, 232,
	64, 232,
	65, 232,
	66, 232,
	67, 232,
	68, 232,
	69, 232,
	70, 232,
	71, 232,
	75, 232,
	79, 232,
	81, 232,
	82, 232,
	85, 232,
	86, 232,
	-2, 0,
	-1, 219,
	21, 230,
	-2, 0,
	-1, 287,
	21, 231,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 730

var yyAct = [...]int16{
	152, 324, 322, 270, 329, 149, 223, 37, 188, 145,
	283, 282, 153, 113, 77, 174, 194, 102, 101, 6,
	104, 225, 195, 129, 196, 147, 105, 197, 198, 264,
	156, 235, 148, 262, 57, 100, 319, 241, 103, 318,
	296, 315, 265, 313, 261, 254, 157, 260, 258, 116,
	157, 106, 175, 123, 176, 285, 156, 303, 266, 114,
	253, 108, 158, 109, 237, 238, 158, 255, 239, 107,
	259, 257, 117, 294, 176, 96, 252, 99, 146, 226,
	228, 230, 231, 232, 240, 242, 245, 246, 247, 248,
	249, 110, 178, 227, 229, 233, 234, 236, 243, 244,
	98, 192, 177, 179, 250, 251, 2, 3, 4, 5,
	159, 104, 178, 302, 169, 163, 166, 105, 294, 161,
	165, 162, 177, 179, 190, 156, 330, 342, 301, 215,
	184, 180, 193, 164, 182, 300, 191, 100, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
	211, 212, 213, 183, 323, 106, 214, 72, 216, 217,
	7, 100, 82, 84, 85, 220, 86, 87, 151, 219,
	90, 91, 225, 93, 94, 95, 291, 96, 97, 99,
	83, 290, 235, 314, 218, 156, 256, 84, 241, 341,
	33, 148, 222, 124, 312, 311, 289, 93, 94, 116,
	263, 96, 98, 99, 83, 157, 280, 281, 340, 114,
	284, 339, 310, 288, 10, 237, 238, 112, 160, 239,
	148, 158, 117, 309, 74, 148, 98, 252, 308, 287,
	226, 228, 230, 231, 232, 240, 242, 245, 246, 247,
	248, 249, 307, 79, 227, 229, 233, 234, 236, 243,
	244, 154, 155, 78, 173, 250, 251, 306, 79, 172,
	305, 181, 292, 293, 295, 304, 297, 48, 78, 122,
	81, 121, 171, 73, 298, 299, 76, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
	143, 144, 56, 34, 120, 9, 9, 316, 317, 119,
	1, 8, 100, 186, 321, 35, 286, 326, 327, 328,
	189, 325, 118, 331, 192, 333, 332, 156, 47, 46,
	334, 335, 45, 51, 72, 336, 53, 82, 84, 22,
	52, 338, 44, 168, 128, 43, 54, 157, 93, 94,
	343, 42, 96, 97, 99, 83, 41, 125, 126, 167,
	70, 40, 127, 158, 39, 38, 18, 19, 49, 187,
	20, 337, 267, 80, 185, 221, 71, 98, 75, 115,
	150, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 55, 224, 50, 13, 111, 0, 0,
	24, 0, 30, 0, 0, 0, 31, 32, 36, 0,
	51, 72, 0, 53, 269, 0, 22, 52, 0, 0,
	0, 268, 0, 54, 0, 272, 273, 271, 277, 279,
	276, 278, 274, 275, 0, 0, 0, 70, 0, 0,
	0, 0, 0, 18, 19, 0, 0, 20, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	0, 0, 0, 13, 0, 51, 72, 24, 53, 30,
	0, 22, 52, 31, 32, 0, 0, 0, 54, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 0, 0, 0, 0, 0, 18, 19,
	0, 0, 20, 17, 72, 0, 0, 0, 71, 22,
	0, 0, 0, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 0, 0, 0, 13, 0,
	0, 0, 24, 0, 30, 0, 18, 19, 31, 32,
	20, 17, 33, 0, 0, 0, 0, 22, 0, 0,
	0, 11, 12, 14, 15, 16, 21, 23, 25, 26,
	27, 28, 29, 0, 0, 0, 13, 0, 320, 0,
	24, 0, 30, 0, 18, 19, 31, 32, 20, 272,
	273, 271, 277, 279, 276, 278, 274, 275, 0, 11,
	12, 14, 15, 16, 21, 23, 25, 26, 27, 28,
	29, 100, 0, 0, 13, 0, 0, 0, 24, 170,
	30, 0, 0, 0, 31, 32, 0, 0, 0, 0,
	100, 0, 0, 0, 0, 0, 82, 84, 85, 0,
	86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	0, 96, 97, 99, 83, 82, 84, 85, 0, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 0,
	96, 97, 99, 83, 100, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 82,
	84, 85, 0, 86, 87, 88, 0, 90, 91, 92,
	93, 94, 95, 0, 96, 97, 99, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
}

var yyPact = [...]int16{
	17, 150, 529, 529, 388, 491, -1000, -1000, -1000, 177,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 256, -1000, 268, -1000, 606, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	36, 140, -1000, 453, -1000, 453, 144, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 197, -1000, -1000, 292, -1000, -1000, 267, -1000,
	29, -1000, -51, -51, -51, -51, -51, -51, -51, -51,
	-51, -51, -51, -51, -51, -51, -51, -51, 23, 166,
	216, 140, -55, -1000, 118, 118, 311, -1000, 587, 21,
	-1000, 252, -1000, -1000, 50, 70, -1000, -1000, -1000, 241,
	-1000, 128, -1000, 298, 453, -1000, -66, -56, -49, -1000,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, -1000, 182, -1000, -1000, -1000,
	114, -1000, -1000, -1000, -1000, -1000, -1000, 37, 37, 163,
	-1000, -1000, -1000, -1000, 170, -1000, -1000, 38, -1000, 606,
	-1000, -1000, 47, -1000, 46, -1000, -1000, -1000, -1000, -1000,
	45, -1000, -1000, -1000, -1000, -1000, 18, 7, 3, -1000,
	-1000, -1000, 387, 147, -1000, 118, 118, 118, 118, 21,
	21, 288, 288, 288, 123, 650, 288, 288, 123, 21,
	21, 288, 21, 147, -1000, 33, -1000, -1000, -1000, 211,
	-1000, 174, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 453, -1000, -1000, -1000, -1000, -1000,
	-1000, 54, 54, 14, 54, 85, 85, 111, 40, -1000,
	-1000, 259, 254, 251, 236, 222, 217, 206, 189, 188,
	-1000, -1000, -1000, -1000, -1000, -1000, 22, 181, -1000, -1000,
	19, -1000, 606, -1000, -1000, -1000, 54, -1000, 13, 10,
	551, -1000, -1000, -1000, 99, 11, 37, 37, 37, 112,
	99, 112, 99, -1000, -1000, -1000, -1000, -1000, 54, 54,
	-1000, -1000, -1000, 54, -1000, -1000, -1000, -1000, -1000, -1000,
	37, -1000, -1000, -1000, -1000, -1000, -1000, 187, -1000, 106,
	-1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 387, 13, 385, 6, 15, 384, 292, 383, 370,
	369, 214, 301, 368, 14, 365, 10, 11, 364, 363,
	8, 362, 3, 4, 361, 2, 1, 0, 359, 12,
	5, 358, 355, 18, 193, 354, 352, 7, 351, 349,
	17, 348, 347, 34, 346, 341, 335, 334, 332, 322,
	319, 318, 267, 9, 306, 300, 293,
}

var yyR1 = [...]int8{
	0, 55, 55, 55, 55, 55, 55, 55, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	32, 32, 32, 32, 33, 33, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 34, 36, 36, 47, 47, 41, 41, 41,
	41, 42, 42, 16, 16, 16, 16, 15, 15, 15,
	4, 4, 38, 40, 40, 39, 39, 39, 48, 46,
	46, 46, 31, 31, 31, 9, 9, 44, 50, 50,
	50, 50, 50, 51, 52, 52, 52, 43, 43, 43,
	1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
	12, 12, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 11, 11, 11, 11, 13, 13,
	13, 14, 14, 14, 14, 56, 19, 19, 19, 19,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 28,
	28, 28, 20, 20, 20, 20, 21, 21, 21, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 23, 23,
	24, 24, 24, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 8, 8, 5, 5, 5, 5, 45, 27,
	29, 29, 30, 30, 26, 25, 25, 53, 49, 10,
	54, 54, 17, 17,
}

var yyR2 = [...]int8{
	0, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 2, 2, 2, 2, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 1, 0, 1, 3, 3, 1, 1, 3,
	3, 1, 2, 3, 4, 2, 1, 3, 1, 2,
	1, 1, 2, 3, 2, 3, 1, 2, 3, 3,
	4, 3, 3, 5, 3, 1, 1, 4, 6, 6,
	5, 4, 3, 2, 2, 1, 1, 3, 4, 2,
	3, 1, 2, 3, 3, 1, 3, 3, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 2, 0, 3, 1,
	2, 3, 3, 2, 1, 2, 0, 3, 2, 1,
	1, 3, 1, 3, 4, 1, 3, 5, 5, 1,
	1, 1, 4, 3, 3, 2, 3, 1, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 2, 1, 1, 1, 1,
	0, 1, 0, 1,
}

var yyChk = [...]int16{
	-1000, -55, 89, 90, 91, 92, 2, 10, -12, -7,
	-11, 60, 61, 75, 62, 63, 64, 12, 45, 46,
	49, 65, 18, 66, 79, 67, 68, 69, 70, 71,
	81, 85, 86, 13, -56, -12, 10, -37, -32, -35,
	-38, -44, -45, -46, -48, -49, -50, -51, -52, -31,
	-3, 12, 19, 15, 25, -8, -7, -43, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	39, 55, 13, -52, -11, -13, 20, -14, 12, 2,
	-19, 2, 39, 57, 40, 41, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 54, 55, 79, 56,
	14, -33, -40, 2, 75, 81, 15, -40, -37, -37,
	-43, -1, 20, -2, 12, -10, 2, 25, 20, 7,
	2, 4, 2, 24, -34, -42, -41, -36, -47, 74,
	-34, -34, -34, -34, -34, -34, -34, -34, -34, -34,
	-34, -34, -34, -34, -34, -53, 55, 2, 9, -30,
	-9, 2, -27, -29, 85, 86, 19, 39, 55, -53,
	2, -40, -33, -16, 15, 2, -16, -39, 22, -37,
	22, 20, 7, 2, -5, 2, 4, 52, 42, 53,
	-5, 20, -14, 25, 2, -18, 5, -28, -20, 12,
	-27, -29, 16, -37, 82, 78, 80, 76, 77, -37,
	-37, -37, -37, -37, -37, -37, -37, -37, -37, -37,
	-37, -37, -37, -37, -53, 15, -27, -27, 21, 6,
	2, -15, 22, -4, -6, 2, 60, 74, 61, 75,
	62, 63, 64, 76, 77, 12, 78, 45, 46, 49,
	65, 18, 66, 79, 80, 67, 68, 69, 70, 71,
	85, 86, 57, 22, 7, 20, -2, 25, 2, 25,
	2, 26, 26, -29, 26, 39, 55, -21, 24, 17,
	-22, 30, 28, 29, 35, 36, 33, 31, 34, 32,
	-16, -16, -17, -16, -17, 22, -54, -53, 2, 22,
	7, 2, -37, -26, 19, -26, 26, -26, -20, -20,
	24, 17, 2, 17, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 21, 2, 22, -4, -26, 26, 26,
	17, -22, -25, 55, -26, -30, -27, -27, -27, -23,
	14, -25, -23, -25, -26, -26, -26, -24, -27, 24,
	21, 2, 21, -27,
}

var yyDef = [...]int16{
	0, -2, 127, 127, 0, 0, 7, 6, 1, 127,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 0, 2, -2, 3, 4, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	0, 108, 218, 0, 228, 0, 85, 86, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	212, 213, 0, 5, 100, 0, 126, 129, 0, 134,
	135, 139, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 43, 0, 0,
	0, 0, 22, 23, 0, 0, 0, 62, 0, 83,
	84, 0, 89, 91, 0, 95, 99, 229, 124, 0,
	130, 0, 133, 138, 0, 42, 51, 47, 48, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 71, 227, 72,
	0, 74, 222, 223, 75, 76, 219, 0, 0, 0,
	82, 20, 21, 24, 0, 56, 25, 0, 64, 66,
	68, 87, 0, 92, 0, 98, 214, 215, 216, 217,
	0, 125, 128, 131, 132, 137, 140, 142, 145, 149,
	150, 151, 0, 26, 52, 0, 0, -2, -2, 27,
	28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 70, 0, 220, 221, 77, -2,
	81, 0, 55, 58, 60, 61, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 63, 67, 88, 90, 93, 97, 94,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	45, 46, 49, 233, 50, 73, 0, -2, 80, 53,
	0, 59, 65, 141, 224, 143, 0, 146, 0, 0,
	0, 153, 158, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 54, 57, 144, 0, 0,
	152, 156, 159, 0, 226, 160, 161, 162, 163, 164,
	0, 165, 166, 167, 147, 148, 225, 0, 171, 0,
	169, 172, 168, 170,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].labels
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).addParseErrf(posrange.PositionRange{}, "no expression found in input")
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*parser).unexpected("", "")
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].node)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[3].node, yyDollar[2].node)
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, yyDollar[2].node)
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).unexpected("aggregation", "")
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, Expressions{})
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
			}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
				Without:  true,
			}
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
			}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
				ReturnBool:     true,
			}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
			yyVAL.node.(*BinaryExpr).VectorMatching.On = true
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardManyToOne
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardOneToMany
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).KeepingName = true
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = []string{}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*parser).unexpected("grouping opts", "\"(\"")
			yyVAL.strings = nil
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[3].item.Val)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].item.Val}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).unexpected("grouping opts", "\",\" or \")\"")
			yyVAL.strings = yyDollar[1].strings
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if !isLabel(yyDollar[1].item.Val) {
				yylex.(*parser).unexpected("grouping opts", "label")
			}
			yyVAL.item = yyDollar[1].item
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*parser).unexpected("grouping opts", "label")
			yyVAL.item = Item{}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			fn, exist := getFunction(yyDollar[1].item.Val, yylex.(*parser).functions)
			if !exist {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "unknown function with name %q", yyDollar[1].item.Val)
			}
			if fn != nil && fn.Experimental && !EnableExperimentalFunctions {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "function %q is not enabled", yyDollar[1].item.Val)
			}
			yyVAL.node = &Call{
				Func: fn,
				Args: yyDollar[2].node.(Expressions),
				PosRange: posrange.PositionRange{
					Start: yyDollar[1].item.Pos,
					End:   yylex.(*parser).lastClosing,
				},
			}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[2].node
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = Expressions{}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = append(yyDollar[1].node.(Expressions), yyDollar[3].node.(Expr))
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = Expressions{yyDollar[1].node.(Expr)}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).addParseErrf(yyDollar[2].item.PositionRange(), "trailing commas not allowed in function call args")
			yyVAL.node = yyDollar[1].node
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ParenExpr{Expr: yyDollar[2].node.(Expr), PosRange: mergeRanges(&yyDollar[1].item, &yyDollar[3].item)}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).addOffset(yyDollar[1].node, yyDollar[3].duration)
			yyVAL.node = yyDollar[1].node
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yylex.(*parser).addOffset(yyDollar[1].node, -yyDollar[4].duration)
			yyVAL.node = yyDollar[1].node
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).unexpected("offset", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).setTimestamp(yyDollar[1].node, yyDollar[3].float)
			yyVAL.node = yyDollar[1].node
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yylex.(*parser).setAtModifierPreprocessor(yyDollar[1].node, yyDollar[3].item)
			yyVAL.node = yyDollar[1].node
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).unexpected("@", "timestamp")
			yyVAL.node = yyDollar[1].node
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			var errMsg string
			vs, ok := yyDollar[1].node.(*VectorSelector)
			if !ok {
				errMsg = "ranges only allowed for vector selectors"
			} else if vs.OriginalOffset != 0 {
				errMsg = "no offset modifiers allowed before range"
			} else if vs.Timestamp != nil {
				errMsg = "no @ modifiers allowed before range"
			}

			if errMsg != "" {
				errRange := mergeRanges(&yyDollar[2].item, &yyDollar[4].item)
				yylex.(*parser).addParseErrf(errRange, errMsg)
			}

			yyVAL.node = &MatrixSelector{
				VectorSelector: yyDollar[1].node.(Expr),
				Range:          yyDollar[3].duration,
				EndPos:         yylex.(*parser).lastClosing,
			}
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = &SubqueryExpr{
				Expr:  yyDollar[1].node.(Expr),
				Range: yyDollar[3].duration,
				Step:  yyDollar[5].duration,

				EndPos: yyDollar[6].item.Pos + 1,
			}
		}
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yylex.(*parser).unexpected("subquery selector", "\"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yylex.(*parser).unexpected("subquery selector", "duration or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yylex.(*parser).unexpected("subquery or range", "\":\" or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).unexpected("subquery selector", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if nl, ok := yyDollar[2].node.(*NumberLiteral); ok {
				if yyDollar[1].item.Typ == SUB {
					nl.Val *= -1
				}
				nl.PosRange.Start = yyDollar[1].item.Pos
				yyVAL.node = nl
			} else {
				yyVAL.node = &UnaryExpr{Op: yyDollar[1].item.Typ, Expr: yyDollar[2].node.(Expr), StartPos: yyDollar[1].item.Pos}
			}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			vs := yyDollar[2].node.(*VectorSelector)
			vs.PosRange = mergeRanges(&yyDollar[1].item, vs)
			vs.Name = yyDollar[1].item.Val
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			vs := &VectorSelector{
				Name:          yyDollar[1].item.Val,
				LabelMatchers: []*labels.Matcher{},
				PosRange:      yyDollar[1].item.PositionRange(),
			}
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			vs := yyDollar[1].node.(*VectorSelector)
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[3].item),
			}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[4].item),
			}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: []*labels.Matcher{},
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[2].item),
			}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if yyDollar[1].matchers != nil {
				yyVAL.matchers = append(yyDollar[1].matchers, yyDollar[3].matcher)
			} else {
				yyVAL.matchers = yyDollar[1].matchers
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.matchers = []*labels.Matcher{yyDollar[1].matcher}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).unexpected("label matching", "\",\" or \"}\"")
			yyVAL.matchers = yyDollar[1].matchers
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.matcher = yylex.(*parser).newMetricNameMatcher(yyDollar[1].item)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).unexpected("label matching", "string")
			yyVAL.matcher = nil
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).unexpected("label matching", "string")
			yyVAL.matcher = nil
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).unexpected("label matching", "label matching operator")
			yyVAL.matcher = nil
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*parser).unexpected("label matching", "identifier or \"}\"")
			yyVAL.matcher = nil
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			b := labels.NewBuilder(yyDollar[2].labels)
			b.Set(labels.MetricName, yyDollar[1].item.Val)
			yyVAL.labels = b.Labels()
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.labels = yyDollar[1].labels
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.labels = labels.New(yyDollar[2].lblList...)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.labels = labels.New(yyDollar[2].lblList...)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.labels = labels.New()
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.labels = labels.New()
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.lblList = append(yyDollar[1].lblList, yyDollar[3].label)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.lblList = []labels.Label{yyDollar[1].label}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).unexpected("label set", "\",\" or \"}\"")
			yyVAL.lblList = yyDollar[1].lblList
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.label = labels.Label{Name: yyDollar[1].item.Val, Value: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).unexpected("label set", "string")
			yyVAL.label = labels.Label{}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).unexpected("label set", "\"=\"")
			yyVAL.label = labels.Label{}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*parser).unexpected("label set", "identifier or \"}\"")
			yyVAL.label = labels.Label{}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).generatedParserResult = &seriesDescription{
				labels: yyDollar[1].labels,
				values: yyDollar[2].series,
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.series = []SequenceValue{}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.series = append(yyDollar[1].series, yyDollar[3].series...)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.series = yyDollar[1].series
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*parser).unexpected("series values", "")
			yyVAL.series = nil
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.series = []SequenceValue{{Omitted: true}}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i < yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Omitted: true})
			}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.series = []SequenceValue{{Value: yyDollar[1].float}}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.series = []SequenceValue{}
			// Add an additional value for time 0, which we ignore in tests.
			for i := uint64(0); i <= yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
			}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.series = []SequenceValue{}
			// Add an additional value for time 0, which we ignore in tests.
			for i := uint64(0); i <= yyDollar[4].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
				yyDollar[1].float += yyDollar[2].float
			}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.series = []SequenceValue{{Histogram: yyDollar[1].histogram}}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.series = []SequenceValue{}
			// Add an additional value for time 0, which we ignore in tests.
			for i := uint64(0); i <= yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Histogram: yyDollar[1].histogram})
				//$1 += $2
			}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			val, err := yylex.(*parser).histogramsIncreaseSeries(yyDollar[1].histogram, yyDollar[3].histogram, yyDollar[5].uint)
			if err != nil {
				yylex.(*parser).addSemanticError(err)
			}
			yyVAL.series = val
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			val, err := yylex.(*parser).histogramsDecreaseSeries(yyDollar[1].histogram, yyDollar[3].histogram, yyDollar[5].uint)
			if err != nil {
				yylex.(*parser).addSemanticError(err)
			}
			yyVAL.series = val
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].item.Val != "stale" {
				yylex.(*parser).unexpected("series values", "number or \"stale\"")
			}
			yyVAL.float = math.Float64frombits(value.StaleNaN)
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.histogram = yylex.(*parser).buildHistogramFromMap(&yyDollar[2].descriptors)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.histogram = yylex.(*parser).buildHistogramFromMap(&yyDollar[2].descriptors)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			m := yylex.(*parser).newMap()
			yyVAL.histogram = yylex.(*parser).buildHistogramFromMap(&m)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			m := yylex.(*parser).newMap()
			yyVAL.histogram = yylex.(*parser).buildHistogramFromMap(&m)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = *(yylex.(*parser).mergeMaps(&yyDollar[1].descriptors, &yyDollar[3].descriptors))
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.descriptors = yyDollar[1].descriptors
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).unexpected("histogram description", "histogram description key, e.g. buckets:[5 10 7]")
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["schema"] = yyDollar[3].int
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["sum"] = yyDollar[3].float
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["count"] = yyDollar[3].float
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["z_bucket"] = yyDollar[3].float
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["z_bucket_w"] = yyDollar[3].float
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["buckets"] = yyDollar[3].bucket_set
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["offset"] = yyDollar[3].int
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["n_buckets"] = yyDollar[3].bucket_set
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["n_offset"] = yyDollar[3].int
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.bucket_set = yyDollar[2].bucket_set
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.bucket_set = yyDollar[2].bucket_set
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.bucket_set = append(yyDollar[1].bucket_set, yyDollar[3].float)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bucket_set = []float64{yyDollar[1].float}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &NumberLiteral{
				Val:      yylex.(*parser).number(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.float = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.float = yyDollar[2].float
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.float = -yyDollar[2].float
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			var err error
			yyVAL.uint, err = strconv.ParseUint(yyDollar[1].item.Val, 10, 64)
			if err != nil {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid repetition in series values: %s", err)
			}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.int = -int64(yyDollar[2].uint)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.int = int64(yyDollar[1].uint)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			var err error
			yyVAL.duration, err = parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[1].item.PositionRange(), err)
			}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &StringLiteral{
				Val:      yylex.(*parser).unquoteString(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.item = Item{
				Typ: METRIC_IDENTIFIER,
				Pos: yyDollar[1].item.PositionRange().Start,
				Val: yylex.(*parser).unquoteString(yyDollar[1].item.Val),
			}
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.duration = 0
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.strings = nil
		}
	}
	goto yystack /* stack new state and value */
}
